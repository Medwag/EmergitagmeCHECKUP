// Direct PayFast Test - bypassing frontend
// This will test our PayFast URL generation directly

import { generatePayFastUrl } from 'backend/payfastUrl.jsw';

export async function directPayFastTest() {
    console.log('üéØ Direct PayFast URL Generation Test');
    console.log('=====================================');
    
    // Simulate typical sign-up parameters with correct types
    const testData = {
        memberData: {
            firstName: 'John',
            lastName: 'Doe', 
            email: 'john.doe@example.com'
        },
        pricingPlan: {
            planId: 'premium-monthly',
            price: 149.00,  // Use the actual signup fee amount
            name: 'EmergiTag Signup Fee'  // Use the exact item name
        },
        planType: 'monthly'
    };
    
    console.log('üìã Test Data:', testData);
    
    try {
        console.log('üîÑ Generating PayFast URL...');
        
        const result = await generatePayFastUrl(testData);
        
        console.log('üì§ PayFast Result:', result);
        
        if (!result.success) {
            console.error('‚ùå PayFast URL generation failed:', result.error);
            return { success: false, error: result.error };
        }
        
        const url = result.redirectUrl;
        console.log('üîó Generated URL Length:', url.length);
        
        // Critical Test: Check for [object Promise]
        const hasPromise = url.includes('[object Promise]');
        console.log('üîç Contains [object Promise]:', hasPromise);
        
        if (hasPromise) {
            console.error('‚ùå CRITICAL ISSUE: URL contains [object Promise]');
            
            // Find which parameters contain promises
            const urlObj = new URL(url);
            const params = Object.fromEntries(urlObj.searchParams);
            
            console.log('üîç Analyzing parameters:');
            Object.entries(params).forEach(([key, value]) => {
                if (value.includes('[object Promise]')) {
                    console.error(`  ‚ùå ${key}: ${value}`);
                } else {
                    console.log(`  ‚úÖ ${key}: ${value.substring(0, 50)}${value.length > 50 ? '...' : ''}`);
                }
            });
            
            return { 
                success: false, 
                error: 'URL contains [object Promise]',
                problematicParams: Object.entries(params)
                    .filter(([k, v]) => v.includes('[object Promise]'))
                    .map(([k, v]) => k)
            };
        }
        
        // Parse URL to validate structure
        const urlObj = new URL(url);
        const params = Object.fromEntries(urlObj.searchParams);
        
        console.log('‚úÖ URL Structure Valid');
        console.log('üìä Parameter Count:', Object.keys(params).length);
        
        // Check key PayFast parameters
        const requiredParams = ['merchant_id', 'merchant_key', 'amount', 'item_name', 'signature'];
        const missingParams = requiredParams.filter(param => !params[param]);
        
        if (missingParams.length > 0) {
            console.warn('‚ö†Ô∏è Missing required parameters:', missingParams);
        } else {
            console.log('‚úÖ All required parameters present');
        }
        
        console.log('üéâ PayFast URL Test PASSED');
        console.log('===========================');
        
        return {
            success: true,
            url: url,
            parameterCount: Object.keys(params).length,
            hasPromises: false,
            params: params
        };
        
    } catch (error) {
        console.error('‚ùå Test failed with error:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Quick console test runner
export async function runPayFastConsoleTest() {
    console.log('\n'.repeat(3));
    console.log('üöÄ STARTING PAYFAST PROMISE RESOLUTION TEST');
    console.log('============================================');
    
    const result = await directPayFastTest();
    
    console.log('\nüìã FINAL RESULT:');
    if (result.success) {
        console.log('%c‚úÖ TEST PASSED - No [object Promise] detected!', 'color: green; font-weight: bold; font-size: 16px');
    } else {
        console.log('%c‚ùå TEST FAILED - Issues detected', 'color: red; font-weight: bold; font-size: 16px');
        console.log('Error:', result.error);
    }
    
    return result;
}