// Fresh PayFast Config Test
// Forces a fresh load of configuration without any caching

import { getSecret } from 'wix-secrets-backend';

export async function getFreshPayFastConfig() {
  console.log('🔄 LOADING FRESH PAYFAST CONFIG');
  console.log('==============================');
  
  const config = {
    timestamp: new Date().toISOString(),
    environment: 'sandbox', // default
    baseUrl: '',
    merchantId: null,
    merchantKey: null,
    passphrase: '',
    debug: {}
  };
  
  try {
    // Step 1: Load environment secret
    console.log('\n1️⃣ Loading payfastEnvironment secret...');
    let envValue = null;
    try {
      envValue = await getSecret('payfastEnvironment');
      console.log(`✅ payfastEnvironment = "${envValue}"`);
      console.log(`✅ Type: ${typeof envValue}`);
      console.log(`✅ Trimmed: "${envValue?.trim()}"`);
      console.log(`✅ Lowercase: "${envValue?.toLowerCase()}"`);
      
      config.debug.envSecret = {
        raw: envValue,
        type: typeof envValue,
        trimmed: envValue?.trim(),
        lowercase: envValue?.toLowerCase()
      };
      
      // Determine environment
      if (envValue && envValue.toLowerCase().trim() === 'live') {
        config.environment = 'live';
        console.log('🎯 Environment detected: LIVE');
      } else {
        config.environment = 'sandbox';
        console.log('🎯 Environment detected: SANDBOX (default)');
      }
      
    } catch (error) {
      console.log(`❌ payfastEnvironment not found: ${error.message}`);
      config.environment = 'sandbox';
      config.debug.envSecret = { error: error.message };
    }
    
    // Step 2: Set base URL based on environment
    if (config.environment === 'live') {
      config.baseUrl = 'https://www.payfast.co.za/eng/process';
      console.log('🔗 Using LIVE URL:', config.baseUrl);
    } else {
      config.baseUrl = 'https://sandbox.payfast.co.za/eng/process';
      console.log('🔗 Using SANDBOX URL:', config.baseUrl);
    }
    
    // Step 3: Load merchant credentials
    console.log('\n2️⃣ Loading merchant credentials...');
    
    try {
      const merchantId = await getSecret('payfast_merchant_id');
      config.merchantId = parseInt(merchantId, 10);
      console.log(`✅ Merchant ID: ${config.merchantId}`);
      
      config.debug.merchantId = {
        raw: merchantId,
        parsed: config.merchantId,
        isSandbox: config.merchantId === 10000100
      };
      
    } catch (error) {
      console.log(`❌ payfast_merchant_id not found: ${error.message}`);
      config.debug.merchantId = { error: error.message };
    }
    
    try {
      config.merchantKey = await getSecret('payfast_merchant_key');
      console.log(`✅ Merchant Key: ${config.merchantKey?.substring(0, 3)}...`);
      
      config.debug.merchantKey = {
        found: true,
        length: config.merchantKey?.length || 0,
        preview: config.merchantKey?.substring(0, 3) + '...',
        isSandbox: config.merchantKey === '46f0cd694581a'
      };
      
    } catch (error) {
      console.log(`❌ payfast_merchant_key not found: ${error.message}`);
      config.debug.merchantKey = { error: error.message };
    }
    
    try {
      config.passphrase = await getSecret('payfast_passphrase') || '';
      console.log(`✅ Passphrase: ${config.passphrase ? 'Set' : 'Empty'}`);
      
      config.debug.passphrase = {
        found: true,
        hasValue: !!config.passphrase,
        length: config.passphrase?.length || 0
      };
      
    } catch (error) {
      console.log(`❌ payfast_passphrase not found: ${error.message}`);
      config.passphrase = '';
      config.debug.passphrase = { error: error.message };
    }
    
    // Step 4: Final analysis
    console.log('\n3️⃣ FINAL CONFIGURATION');
    console.log('======================');
    console.log(`Environment: ${config.environment}`);
    console.log(`Base URL: ${config.baseUrl}`);
    console.log(`Merchant ID: ${config.merchantId}`);
    console.log(`Has Merchant Key: ${!!config.merchantKey}`);
    console.log(`Has Passphrase: ${!!config.passphrase}`);
    
    const isProperlyConfiguredForLive = (
      config.environment === 'live' &&
      config.merchantId && config.merchantId !== 10000100 &&
      config.merchantKey && config.merchantKey !== '46f0cd694581a' &&
      config.baseUrl.includes('www.payfast.co.za')
    );
    
    console.log(`Properly configured for live: ${isProperlyConfiguredForLive}`);
    
    config.isProperlyConfiguredForLive = isProperlyConfiguredForLive;
    
    return config;
    
  } catch (error) {
    console.error('Fresh config load failed:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

export async function testUrlGeneration() {
  console.log('🧪 TESTING URL GENERATION');
  console.log('========================');
  
  try {
    const config = await getFreshPayFastConfig();
    
    if (!config.success === false) {
      // Test URL generation with this config
      const testParams = {
        merchant_id: config.merchantId,
        merchant_key: config.merchantKey,
        amount: '100.00',
        item_name: 'Test Payment',
        return_url: 'https://example.com/return',
        cancel_url: 'https://example.com/cancel',
        notify_url: 'https://example.com/notify'
      };
      
      // Generate signature (simplified)
      const paramString = Object.keys(testParams)
        .sort()
        .map(key => `${key}=${encodeURIComponent(testParams[key])}`)
        .join('&');
      
      if (config.passphrase) {
        paramString += `&passphrase=${encodeURIComponent(config.passphrase)}`;
      }
      
      const testUrl = `${config.baseUrl}?${paramString}`;
      
      console.log('Generated test URL:', testUrl);
      
      return {
        success: true,
        config: config,
        testUrl: testUrl,
        urlContainsLive: testUrl.includes('www.payfast.co.za'),
        urlContainsSandbox: testUrl.includes('sandbox.payfast.co.za')
      };
    }
    
    return config;
    
  } catch (error) {
    console.error('URL generation test failed:', error);
    return {
      success: false,
      error: error.message
    };
  }
}