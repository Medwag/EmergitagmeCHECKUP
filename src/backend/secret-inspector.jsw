// Detailed Secret Inspector - Shows exact secret values

import { getSecret } from 'wix-secrets-backend';

export async function inspectSecrets() {
  console.log('üîç INSPECTING PAYFAST SECRETS');
  console.log('=============================');
  
  const secrets = {};
  const issues = [];
  
  // Check payfastEnvironment
  try {
    const envValue = await getSecret('payfastEnvironment');
    secrets.payfastEnvironment = {
      found: true,
      rawValue: envValue,
      type: typeof envValue,
      length: envValue ? envValue.length : 0,
      trimmed: envValue ? envValue.trim() : null,
      lowercase: envValue ? envValue.toLowerCase() : null,
      isExactlyLive: envValue === 'live',
      isLiveLowercase: envValue && envValue.toLowerCase() === 'live',
      hasWhitespace: envValue !== (envValue ? envValue.trim() : null)
    };
    
    console.log(`payfastEnvironment: "${envValue}"`);
    console.log(`- Type: ${typeof envValue}`);
    console.log(`- Length: ${envValue ? envValue.length : 0}`);
    console.log(`- Exactly "live": ${envValue === 'live'}`);
    console.log(`- Lowercase "live": ${envValue && envValue.toLowerCase() === 'live'}`);
    
    if (!secrets.payfastEnvironment.isLiveLowercase) {
      issues.push(`payfastEnvironment is "${envValue}" but should be exactly "live"`);
    }
    
  } catch (error) {
    secrets.payfastEnvironment = {
      found: false,
      error: error.message
    };
    issues.push('payfastEnvironment secret not found');
    console.log('‚ùå payfastEnvironment not found:', error.message);
  }
  
  // Check payfast_merchant_id
  try {
    const merchantId = await getSecret('payfast_merchant_id');
    const parsedId = parseInt(merchantId, 10);
    
    secrets.payfast_merchant_id = {
      found: true,
      rawValue: merchantId,
      type: typeof merchantId,
      parsedValue: parsedId,
      isSandbox: parsedId === 10000100
    };
    
    console.log(`payfast_merchant_id: "${merchantId}" -> ${parsedId}`);
    console.log(`- Is sandbox (10000100): ${parsedId === 10000100}`);
    
    if (parsedId === 10000100) {
      issues.push('payfast_merchant_id is still sandbox value (10000100)');
    }
    
  } catch (error) {
    secrets.payfast_merchant_id = {
      found: false,
      error: error.message
    };
    issues.push('payfast_merchant_id secret not found');
    console.log('‚ùå payfast_merchant_id not found:', error.message);
  }
  
  // Check payfast_merchant_key
  try {
    const merchantKey = await getSecret('payfast_merchant_key');
    
    secrets.payfast_merchant_key = {
      found: true,
      length: merchantKey ? merchantKey.length : 0,
      preview: merchantKey ? merchantKey.substring(0, 3) + '...' : null,
      isSandbox: merchantKey === '46f0cd694581a'
    };
    
    console.log(`payfast_merchant_key: ${merchantKey ? merchantKey.substring(0, 3) + '...' : 'null'}`);
    console.log(`- Length: ${merchantKey ? merchantKey.length : 0}`);
    console.log(`- Is sandbox key: ${merchantKey === '46f0cd694581a'}`);
    
    if (merchantKey === '46f0cd694581a') {
      issues.push('payfast_merchant_key is still sandbox value');
    }
    
  } catch (error) {
    secrets.payfast_merchant_key = {
      found: false,
      error: error.message
    };
    issues.push('payfast_merchant_key secret not found');
    console.log('‚ùå payfast_merchant_key not found:', error.message);
  }
  
  // Check payfast_passphrase
  try {
    const passphrase = await getSecret('payfast_passphrase');
    
    secrets.payfast_passphrase = {
      found: true,
      hasValue: !!passphrase,
      length: passphrase ? passphrase.length : 0
    };
    
    console.log(`payfast_passphrase: ${passphrase ? 'Set' : 'Empty'}`);
    
  } catch (error) {
    secrets.payfast_passphrase = {
      found: false,
      error: error.message
    };
    console.log('‚ùå payfast_passphrase not found:', error.message);
  }
  
  return {
    secrets: secrets,
    issues: issues,
    timestamp: new Date().toISOString()
  };
}