// PayFast Secret Diagnostic Tool
// Debug exactly what secrets are being loaded

import { getSecret } from 'wix-secrets-backend';

export async function diagnosePayFastSecrets() {
  console.log('üîç PAYFAST SECRETS DIAGNOSTIC');
  console.log('=============================');
  
  const results = {
    timestamp: new Date().toISOString(),
    secrets: {},
    issues: [],
    recommendations: []
  };

  try {
    // Test payfastEnvironment secret
    console.log('\nüìã Testing payfastEnvironment secret...');
    try {
      const envSecret = await getSecret('payfastEnvironment');
      console.log('‚úÖ payfastEnvironment found:', envSecret);
      console.log('‚úÖ Type:', typeof envSecret);
      console.log('‚úÖ Length:', envSecret ? envSecret.length : 0);
      console.log('‚úÖ Trimmed:', envSecret ? envSecret.trim() : 'null');
      console.log('‚úÖ Lowercase:', envSecret ? envSecret.toLowerCase() : 'null');
      console.log('‚úÖ Equals "live":', envSecret && envSecret.toLowerCase() === 'live');
      
      results.secrets.payfastEnvironment = {
        found: true,
        value: envSecret,
        type: typeof envSecret,
        trimmed: envSecret ? envSecret.trim() : null,
        lowercase: envSecret ? envSecret.toLowerCase() : null,
        isLive: envSecret && envSecret.toLowerCase() === 'live'
      };
      
    } catch (error) {
      console.log('‚ùå payfastEnvironment NOT FOUND:', error.message);
      results.secrets.payfastEnvironment = {
        found: false,
        error: error.message
      };
      results.issues.push('payfastEnvironment secret not found - will default to sandbox');
    }

    // Test payfast_merchant_id secret
    console.log('\nüìã Testing payfast_merchant_id secret...');
    try {
      const merchantId = await getSecret('payfast_merchant_id');
      console.log('‚úÖ payfast_merchant_id found:', merchantId);
      console.log('‚úÖ Type:', typeof merchantId);
      console.log('‚úÖ Parsed as int:', parseInt(merchantId, 10));
      console.log('‚úÖ Is sandbox (10000100):', parseInt(merchantId, 10) === 10000100);
      
      results.secrets.payfast_merchant_id = {
        found: true,
        value: merchantId,
        type: typeof merchantId,
        parsed: parseInt(merchantId, 10),
        isSandbox: parseInt(merchantId, 10) === 10000100
      };
      
      if (parseInt(merchantId, 10) === 10000100) {
        results.issues.push('Merchant ID is still sandbox value (10000100) - should be your live merchant ID');
      }
      
    } catch (error) {
      console.log('‚ùå payfast_merchant_id NOT FOUND:', error.message);
      results.secrets.payfast_merchant_id = {
        found: false,
        error: error.message
      };
      results.issues.push('payfast_merchant_id secret not found');
    }

    // Test payfast_merchant_key secret
    console.log('\nüìã Testing payfast_merchant_key secret...');
    try {
      const merchantKey = await getSecret('payfast_merchant_key');
      console.log('‚úÖ payfast_merchant_key found');
      console.log('‚úÖ Type:', typeof merchantKey);
      console.log('‚úÖ Length:', merchantKey ? merchantKey.length : 0);
      console.log('‚úÖ First 3 chars:', merchantKey ? merchantKey.substring(0, 3) : 'null');
      console.log('‚úÖ Is sandbox (46f0cd694581a):', merchantKey === '46f0cd694581a');
      
      results.secrets.payfast_merchant_key = {
        found: true,
        length: merchantKey ? merchantKey.length : 0,
        preview: merchantKey ? merchantKey.substring(0, 3) + '...' : null,
        isSandbox: merchantKey === '46f0cd694581a'
      };
      
      if (merchantKey === '46f0cd694581a') {
        results.issues.push('Merchant Key is still sandbox value - should be your live merchant key');
      }
      
    } catch (error) {
      console.log('‚ùå payfast_merchant_key NOT FOUND:', error.message);
      results.secrets.payfast_merchant_key = {
        found: false,
        error: error.message
      };
      results.issues.push('payfast_merchant_key secret not found');
    }

    // Test payfast_passphrase secret
    console.log('\nüìã Testing payfast_passphrase secret...');
    try {
      const passphrase = await getSecret('payfast_passphrase');
      console.log('‚úÖ payfast_passphrase found');
      console.log('‚úÖ Type:', typeof passphrase);
      console.log('‚úÖ Length:', passphrase ? passphrase.length : 0);
      console.log('‚úÖ Has value:', !!passphrase);
      
      results.secrets.payfast_passphrase = {
        found: true,
        hasValue: !!passphrase,
        length: passphrase ? passphrase.length : 0
      };
      
    } catch (error) {
      console.log('‚ùå payfast_passphrase NOT FOUND:', error.message);
      results.secrets.payfast_passphrase = {
        found: false,
        error: error.message
      };
      results.issues.push('payfast_passphrase secret not found');
    }

    // Analysis and Recommendations
    console.log('\nüìä ANALYSIS');
    console.log('===========');
    
    if (results.issues.length === 0) {
      console.log('‚úÖ All secrets found');
      results.recommendations.push('All secrets are configured');
    } else {
      console.log(`‚ùå ${results.issues.length} issue(s) found:`);
      results.issues.forEach((issue, index) => {
        console.log(`${index + 1}. ${issue}`);
      });
    }

    // Specific recommendations
    if (!results.secrets.payfastEnvironment?.found) {
      results.recommendations.push('ADD: payfastEnvironment secret with value "live"');
    } else if (!results.secrets.payfastEnvironment?.isLive) {
      results.recommendations.push('UPDATE: payfastEnvironment secret to exactly "live" (lowercase)');
    }

    if (results.secrets.payfast_merchant_id?.isSandbox) {
      results.recommendations.push('UPDATE: payfast_merchant_id to your live merchant ID (not 10000100)');
    }

    if (results.secrets.payfast_merchant_key?.isSandbox) {
      results.recommendations.push('UPDATE: payfast_merchant_key to your live merchant key (not 46f0cd694581a)');
    }

    return results;

  } catch (error) {
    console.error('‚ùå Diagnostic failed:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

export async function testConfigAfterSecrets() {
  console.log('üß™ TESTING CONFIG AFTER SECRETS');
  console.log('===============================');
  
  try {
    // Import and test the configuration
    const { getPayFastConfig } = await import('backend/payfast-config-fixed.jsw');
    
    console.log('Loading PayFast configuration...');
    const config = await getPayFastConfig();
    
    console.log('Getting configuration summary...');
    const summary = config.getConfigSummary();
    
    console.log('Configuration loaded:', summary);
    
    return {
      success: true,
      config: summary,
      isLive: summary.environment === 'live',
      hasLiveCredentials: summary.merchantId !== 10000100
    };
    
  } catch (error) {
    console.error('Config test failed:', error);
    return {
      success: false,
      error: error.message
    };
  }
}