// Quick Secret Test
// Test exactly what secrets are being retrieved

import { getSecret } from 'wix-secrets-backend';

export async function quickSecretTest() {
  console.log('üîç QUICK SECRET TEST');
  console.log('==================');
  
  const results = [];
  
  // Test each secret individually
  const secrets = [
    'payfastEnvironment',
    'payfast_merchant_id', 
    'payfast_merchant_key',
    'payfast_passphrase'
  ];
  
  for (const secretName of secrets) {
    try {
      console.log(`\nTesting: ${secretName}`);
      const value = await getSecret(secretName);
      console.log(`‚úÖ Found: ${value}`);
      console.log(`‚úÖ Type: ${typeof value}`);
      console.log(`‚úÖ Length: ${value?.length || 0}`);
      
      results.push({
        name: secretName,
        found: true,
        value: value,
        type: typeof value,
        length: value?.length || 0
      });
      
    } catch (error) {
      console.log(`‚ùå NOT FOUND: ${error.message}`);
      results.push({
        name: secretName,
        found: false,
        error: error.message
      });
    }
  }
  
  // Test environment detection specifically
  console.log('\nüéØ ENVIRONMENT DETECTION TEST');
  console.log('============================');
  
  try {
    const envSecret = await getSecret('payfastEnvironment');
    console.log(`Environment secret value: "${envSecret}"`);
    console.log(`Trimmed: "${envSecret?.trim()}"`);
    console.log(`Lowercase: "${envSecret?.toLowerCase()}"`);
    console.log(`Equals 'live': ${envSecret && envSecret.toLowerCase() === 'live'}`);
    
    const detectedEnv = envSecret && envSecret.toLowerCase() === 'live' ? 'live' : 'sandbox';
    console.log(`Detected environment: ${detectedEnv}`);
    
    results.push({
      name: 'environment_detection',
      rawValue: envSecret,
      detectedEnvironment: detectedEnv,
      isLive: detectedEnv === 'live'
    });
    
  } catch (error) {
    console.log(`Environment detection failed: ${error.message}`);
    results.push({
      name: 'environment_detection',
      error: error.message,
      detectedEnvironment: 'sandbox'
    });
  }
  
  return results;
}