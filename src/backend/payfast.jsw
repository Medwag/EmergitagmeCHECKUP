// backend/payfast.jsw
// PayFast Payment Integration for EmergiTag
// 
// REQUIRED WIX SECRETS:
// - payfast_merchant_id    (PayFast Merchant ID)  
// - payfast_merchant_key   (PayFast Merchant Key)
// - payfast_passphrase     (PayFast Passphrase)
//
import { getPayFastConfig } from 'backend/payfast-config.jsw';
import { generatePayFastSignature } from 'backend/payfastUtils.jsw';
import { sendDiscordLog } from 'backend/logger.jsw';
import wixData from 'wix-data';

// Fallback configuration for when secrets are not available
// REQUIRED SECRETS: payfast_merchant_id, payfast_merchant_key, payfast_passphrase
async function getFallbackPayFastConfig() {
    sendDiscordLog(`ðŸ”§ PayFast: Using fallback sandbox configuration - secrets should be: payfast_merchant_id, payfast_merchant_key, payfast_passphrase`);
    
    return {
        getCredentials: () => ({
            merchantId: 10000100, // PayFast sandbox merchant ID
            merchantKey: '46f0cd694581a', // PayFast sandbox merchant key
            passphrase: 'passphrase' // Default sandbox passphrase
        }),
        getPaymentUrl: () => 'https://sandbox.payfast.co.za/eng/process',
        isSandbox: () => true,
        getEnvironment: () => 'sandbox-fallback'
    };
}

// Simple fallback signature generation
async function generateFallbackSignature(data, passphrase) {
    sendDiscordLog(`ðŸ”§ PayFast: Generating fallback signature...`);
    
    // Simple encoding for fallback
    const encode = (str) => encodeURIComponent(str || '').replace(/%20/g, '+');
    
    // Build query string
    const queryString = Object.keys(data).sort()
        .filter(key => data[key] !== undefined && data[key] !== null && data[key] !== '')
        .map(key => `${key}=${encode(String(data[key]))}`)
        .join('&');
    
    const fullString = passphrase ? `${queryString}&passphrase=${encode(passphrase)}` : queryString;
    
    // For testing purposes, generate a simple hash
    // Note: This is not secure for production, only for debugging
    let hash = 0;
    for (let i = 0; i < fullString.length; i++) {
        const char = fullString.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    
    const signature = Math.abs(hash).toString(16).padStart(32, '0').substring(0, 32);
    sendDiscordLog(`âš ï¸ PayFast: Using fallback signature (NOT SECURE): ${signature}`);
    return signature;
}

// Simple test function to verify backend connectivity
export async function testPayfastConnection() {
    try {
        // Simple test that doesn't depend on external services
        const testData = {
            merchant_id: "test",
            merchant_key: "test", 
            amount: "100.00",
            item_name: "Test"
        };
        
        // Test that we can access the config function
        const config = await getPayFastConfig();
        
        // Send success log without awaiting to avoid blocking
        sendDiscordLog(`ðŸ§ª PayFast: Test connection successful - config loaded`).catch(e => 
            console.log(`Discord log failed but test passed: ${e.message}`)
        );
        
        return "PayFast backend connection OK";
    } catch (error) {
        // Send error log without awaiting
        sendDiscordLog(`âŒ PayFast: Test failed - ${error.message}`).catch(e => 
            console.log(`Discord log failed: ${e.message}`)
        );
        throw new Error(`PayFast backend test failed: ${error.message}`);
    }
}

export async function createPayfastPayment(userId, email) {
    try {
        await sendDiscordLog(`ðŸš€ PayFast: Starting payment creation for user ${userId} (${email})`);
        
        // Load user profile to enrich payment data
        let profile = null;
        try {
            const q = await wixData.query('Emergency_Profiles').eq('_owner', userId).limit(1).find({ suppressAuth: true });
            profile = q.items && q.items.length > 0 ? q.items[0] : null;
        } catch (profileErr) {
            sendDiscordLog("PayFast: Could not load profile for user " + userId + ": " + profileErr.message);
        }

        // Step 1: Get PayFast configuration with fallback
        await sendDiscordLog(`🔧 PayFast: Loading configuration...`);
        let config;
        try {
            config = await getPayFastConfig();
            await sendDiscordLog(`✅ PayFast: Configuration loaded successfully`);
        } catch (configError) {
            await sendDiscordLog(`⚠️ PayFast: Main config failed, trying fallback: ${configError.message}`);
            config = await getFallbackPayFastConfig();
            await sendDiscordLog(`✅ PayFast: Fallback configuration loaded`);
        }
        
        // Step 2: Get credentials (from secrets: payfast_merchant_id, payfast_merchant_key, payfast_passphrase)
        await sendDiscordLog(`🔑 PayFast: Retrieving credentials from secrets: payfast_merchant_id, payfast_merchant_key, payfast_passphrase`);
        
        // Ensure we get actual values, not promises
        let merchantId, merchantKey, passphrase;
        try {
            const credentials = config.getCredentials();
            // Force resolution of any potential promises
            merchantId = await Promise.resolve(credentials.merchantId);
            merchantKey = await Promise.resolve(credentials.merchantKey);
            passphrase = await Promise.resolve(credentials.passphrase);
        } catch (credError) {
            throw new Error(`Failed to get PayFast credentials: ${credError.message}`);
        }

        if (!merchantId || !merchantKey) {
            throw new Error(`PayFast credentials missing: merchantId=${!!merchantId}, merchantKey=${!!merchantKey}. Check secrets: payfast_merchant_id, payfast_merchant_key, payfast_passphrase`);
        }
        await sendDiscordLog(`✅ PayFast: Credentials retrieved - merchantId: ${merchantId}, merchantKey: ${String(merchantKey).substring(0, 5)}...`);

        // Step 3: Prepare payment data
        const emailToUse = email || (profile && profile.emailAddress) || '';
        const fullName = (profile && profile.fullName) || '';
        const nameParts = fullName.trim().split(/\s+/);
        const name_first = nameParts[0] || 'EmergiTag';
        const name_last = nameParts.slice(1).join(' ');
        await sendDiscordLog(`📋 PayFast: Preparing payment data...`);
        
        // Debug: Log each value to ensure no promises
        await sendDiscordLog(`DEBUG - merchantId: ${merchantId} (type: ${typeof merchantId})`);
        await sendDiscordLog(`DEBUG - merchantKey: ${String(merchantKey).substring(0, 5)}... (type: ${typeof merchantKey})`);
        await sendDiscordLog(`DEBUG - userId: ${userId} (type: ${typeof userId})`);
        await sendDiscordLog(`DEBUG - emailToUse: ${emailToUse} (type: ${typeof emailToUse})`);
        await sendDiscordLog(`DEBUG - name_first: ${name_first} (type: ${typeof name_first})`);
        await sendDiscordLog(`DEBUG - name_last: ${name_last} (type: ${typeof name_last})`);
        
        const data = {
            merchant_id: String(merchantId),
            merchant_key: String(merchantKey),
            return_url: "https://www.emergitag.me/signup-success",
            cancel_url: "https://www.emergitag.me/signup-cancelled",
            // Use the canonical ITN route handled by http-functions/payfast-itn.js
            notify_url: "https://www.emergitag.me/_functions/payfastItn",
            name_first: String(name_first),
            name_last: String(name_last),
            email_address: String(emailToUse),
            m_payment_id: String(userId),
            amount: "149.00",
            item_name: "EmergiTag Signup Fee",
            item_description: "EmergiTag Signup Fee",
            custom_str1: String(fullName),
            custom_str2: String((profile && profile.phone) || ""),
            custom_str3: String((profile && profile.homeAddress) || ""),
            custom_str4: String((profile && profile.deliveryAddress) || ""),
            custom_str5: String((profile && profile.emailAddress) || email || ""),
            email_confirmation: "1",
            confirmation_address: String(emailToUse)
        };
        
        // Debug: Log the data object to see if any values are promises
        await sendDiscordLog(`DEBUG - Data object keys and types:`);
        for (const [key, value] of Object.entries(data)) {
            await sendDiscordLog(`  ${key}: ${value} (type: ${typeof value}, isPromise: ${value instanceof Promise})`);
        }
        await sendDiscordLog(`✅ PayFast: Payment data prepared for ${data.amount} ZAR`);

        // Step 4: Generate signature
        await sendDiscordLog(`🔐 PayFast: Generating signature...`);
        let signature;
        try {
            signature = generatePayFastSignature(data, passphrase);
            if (!signature || signature.length !== 32) {
                throw new Error(`Invalid signature generated: ${signature}`);
            }
            await sendDiscordLog(`✅ PayFast: Signature generated successfully (${signature})`);
        } catch (sigError) {
            await sendDiscordLog(`❌ PayFast: Main signature generation failed: ${sigError.message}`);
            // Try simple fallback signature for testing
            try {
                signature = await generateFallbackSignature(data, passphrase);
                await sendDiscordLog(`✅ PayFast: Fallback signature generated (${signature})`);
            } catch (fallbackError) {
                await sendDiscordLog(`❌ PayFast: Fallback signature also failed: ${fallbackError.message}`);
                throw new Error(`PayFast signature generation completely failed: ${sigError.message}`);
            }
        }

        // Step 5: Import encoding utility
        await sendDiscordLog(`🔧 PayFast: Loading encoding utility...`);
        let customEncode;
        try {
            const utils = await import('backend/payfastUtils.jsw');
            customEncode = utils.customEncode;
            if (typeof customEncode !== 'function') {
                throw new Error('customEncode is not a function');
            }
            await sendDiscordLog(`✅ PayFast: Encoding utility loaded`);
        } catch (importError) {
            await sendDiscordLog(`❌ PayFast: Failed to load encoding utility: ${importError.message}`);
            // Fallback encoding function
            customEncode = (str) => encodeURIComponent(str || '');
            await sendDiscordLog(`✅ PayFast: Using fallback encoding function`);
        }

        // Step 6: Build query string
        await sendDiscordLog(`🔗 PayFast: Building query string...`);
        const queryString = Object.keys(data).sort()
            .map(key => `${key}=${customEncode(data[key])}`)
            .join('&') + `&signature=${signature}`;
        await sendDiscordLog(`✅ PayFast: Query string built (length: ${queryString.length})`);

        // Step 7: Get base URL and build final URL
        await sendDiscordLog(`🌐 PayFast: Getting payment URL...`);
        const baseUrl = await Promise.resolve(config.getPaymentUrl());
        const finalUrl = `${baseUrl}?${queryString}`;
        
        await sendDiscordLog(`✅ PayFast: Payment URL generated successfully`);
        await sendDiscordLog(`📤 PayFast URL: ${finalUrl}`);
        return finalUrl;
        
    } catch (error) {
        await sendDiscordLog(`❌ PayFast: Error in createPayfastPayment - ${error.message}`);
        await sendDiscordLog(`❌ PayFast: Error stack - ${error.stack}`);
        throw error;
    }
}

